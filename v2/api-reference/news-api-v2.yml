openapi: 3.0.3
info:
  title: NewsCatcher News API V2
  description: |
    NewsCatcher is a data-as-a-service startup that has one main goal:
    to build the largest database of structured news articles published online.
    In other words, we're like Google for the news part of the web, which you can access as a source of data.

    Some useful links:
    - [How NewsCatcher Works](https://newscatcherapi.com/docs/v2/documentation/guides-and-concepts/how-newscatcher-works)
    - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python)
  contact:
    email: team@newscatcherapi.com
  version: 1.0.1
externalDocs:
  description: Find out more about NewsCatcher
  url: https://newscatcherapi.com/docs/
servers:
  - url: https://api.newscatcherapi.com/v2
security:
  - ApiKeyAuth: []
tags:
  - name: search
    description: Search for specific news articles
    externalDocs:
      description: Find out more about searching news articles
      url: https://www.newscatcherapi.com/docs/v2/api-reference/endpoints/search/search-news-get
  - name: latest_headlines
    description: Get lastest news articles
    externalDocs:
      description: Find out more about getting the latest news articles
      url: https://www.newscatcherapi.com/docs/v2/api-reference/endpoints/latest_headlines/get-latest-headlines-get
  - name: sources
    description: Get the list of top news sources supported by NewsCatcher.
    externalDocs:
      description: Find out more about getting a list of sources
      url: https://www.newscatcherapi.com/docs/v2/api-reference/endpoints/sources/get-top-news-sources-get
paths:
  /search:
    get:
      tags:
        - search
      summary: Search news
      description:
        Searches for articles based on specified criteria such as keyword,
        language, country, source, and more.
      operationId: Search_get
      parameters:
        - $ref: "#/components/parameters/q"
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/not_lang"
        - $ref: "#/components/parameters/published_date_precision"
        - $ref: "#/components/parameters/from"
        - $ref: "#/components/parameters/to"
        - $ref: "#/components/parameters/search_in"
        - $ref: "#/components/parameters/countries"
        - $ref: "#/components/parameters/not_countries"
        - $ref: "#/components/parameters/topic"
        - $ref: "#/components/parameters/sources"
        - $ref: "#/components/parameters/not_sources"
        - $ref: "#/components/parameters/ranked_only"
        - $ref: "#/components/parameters/from_rank"
        - $ref: "#/components/parameters/to_rank"
        - $ref: "#/components/parameters/sort_by"
        - $ref: "#/components/parameters/page_size"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_response"
        "400":
          description: "API is not put in headers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "401":
          description: "API Key not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "406":
          description: "Wrong parameter has been used"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "408":
          description: "Request Timeout"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "429":
          description: "Concurrency violated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
    post:
      tags:
        - search
      summary: Search news
      description:
        Searches for articles based on specified criteria such as keyword,
        language, country, source, and more.
      operationId: Search_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Search"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_response"
        "400":
          description: "API is not put in headers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "401":
          description: "API Key not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "406":
          description: "Wrong parameter has been used"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "408":
          description: "Request Timeout"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "429":
          description: "Concurrency violated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
  /latest_headlines:
    get:
      tags:
        - latest_headlines
      summary: Get latest headlines
      description:
        Retrieves the latest headlines given any topic, country, or language.
      operationId: LatestHeadlines_get
      parameters:
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/not_lang"
        - $ref: "#/components/parameters/countries"
        - $ref: "#/components/parameters/not_countries"
        - $ref: "#/components/parameters/topic"
        - $ref: "#/components/parameters/sources"
        - $ref: "#/components/parameters/not_sources"
        - $ref: "#/components/parameters/when"
        - $ref: "#/components/parameters/ranked_only"
        - $ref: "#/components/parameters/page_size"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_response_latest"
        "400":
          description: "API is not put in headers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "401":
          description: "API Key not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "406":
          description: "Wrong parameter has been used"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "408":
          description: "Request Timeout"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "429":
          description: "Concurrency violated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
    post:
      tags:
        - latest_headlines
      summary: Get latest headlines
      description:
        Retrieves the latest headlines given any topic, country, or language.
      operationId: LatestHeadlines_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/latestHeadlines"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_response_latest"
        "400":
          description: "API is not put in headers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "401":
          description: "API Key not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "406":
          description: "Wrong parameter has been used"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "408":
          description: "Request Timeout"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "429":
          description: "Concurrency violated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
  /sources:
    get:
      tags:
        - sources
      summary: Get top news sources
      description: |
        Returns a list of the top 100 news websites supported by NewsCatcher. Overall, we support over 60,000 websites. 
        Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
      operationId: Sources_get
      parameters:
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/countries"
        - $ref: "#/components/parameters/topic"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_response_sources"
        "400":
          description: "API is not put in headers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "401":
          description: "API Key not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "406":
          description: "Wrong parameter has been used"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "408":
          description: "Request Timeout"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "429":
          description: "Concurrency violated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
    post:
      tags:
        - sources
      summary: Get top news sources
      description: |
        Returns a list of the top 100 news websites supported by NewsCatcher. Overall, we support over 60,000 websites. 
        Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
      operationId: Sources_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourcesQuery"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_response_sources"
        "400":
          description: "API is not put in headers"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "401":
          description: "API Key not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "406":
          description: "Wrong parameter has been used"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "408":
          description: "Request Timeout"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
        "429":
          description: "Concurrency violated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
components:
  parameters:
    q:
      description: |
        Keyword/keywords you're searching for. This is the most important part of your query.
        For for more examples and explanations, leant [Advanced Query Parameter](#).
      name: q
      in: query
      required: true
      schema:
        type: string
        example: '"Elon Musk"'
    lang:
      description: |
        Specifies the languages of the search. For example: `en`.
        The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code.
      name: lang
      in: query
      required: false
      schema:
        type: string
        enum:
          [
            "af",
            "ar",
            "bg",
            "bn",
            "ca",
            "cn",
            "cs",
            "cy",
            "da",
            "de",
            "el",
            "en",
            "es",
            "et",
            "fa",
            "fi",
            "fr",
            "gu",
            "he",
            "hi",
            "hr",
            "hu",
            "id",
            "it",
            "ja",
            "kn",
            "ko",
            "lt",
            "lv",
            "mk",
            "ml",
            "mr",
            "ne",
            "nl",
            "no",
            "pa",
            "pl",
            "pt",
            "ro",
            "ru",
            "sk",
            "sl",
            "so",
            "sq",
            "sv",
            "sw",
            "ta",
            "te",
            "th",
            "tl",
            "tr",
            "tw",
            "uk",
            "ur",
            "vi",
          ]
        example: "en"
    not_lang:
      description: |
        Inverse to the `lang` parameter
      name: not_lang
      in: query
      required: false
      schema:
        type: string
        enum:
          [
            "af",
            "ar",
            "bg",
            "bn",
            "ca",
            "cn",
            "cs",
            "cy",
            "da",
            "de",
            "el",
            "en",
            "es",
            "et",
            "fa",
            "fi",
            "fr",
            "gu",
            "he",
            "hi",
            "hr",
            "hu",
            "id",
            "it",
            "ja",
            "kn",
            "ko",
            "lt",
            "lv",
            "mk",
            "ml",
            "mr",
            "ne",
            "nl",
            "no",
            "pa",
            "pl",
            "pt",
            "ro",
            "ru",
            "sk",
            "sl",
            "so",
            "sq",
            "sv",
            "sw",
            "ta",
            "te",
            "th",
            "tl",
            "tr",
            "tw",
            "uk",
            "ur",
            "vi",
          ]
    published_date_precision:
      description: |
        The precision of the published date. There are three types:
        - `full`: The day and time of an article is correctly identified with the appropriate timezone.
        - `timezone unknown`: The day and time of an article is correctly identified without timezone.
        - `date`: Only the day is identified without an exact time.
      name: published_date_precision
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/publish_date_precision"
    from:
      description: |
        `YYYY/mm/dd` From which point in time to start the search.
        The default timezone is UTC.
        Defaults to the past week.
      name: from
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/date"
    to:
      description: |
        `YYYY/mm/dd` Until which point in time to search for.
        The default timezone is UTC.
      name: to
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/date"
    search_in:
      description: |
        By default, we search what you specified in the `q` parameter in both `title` and `summary` of the article.
        However, you can limit this to either `title` or `summary`.
      name: search_in
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/search_in"
    countries:
      description: |
        Countries where the news publisher is located.
        One or multiple countries can be used in the search.
        The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        For example, `US,CA,MX` or just `US`

        **Important**: This parameter is not responsible for the countries mentioned in the news article.
      name: countries
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/countries"
    not_countries:
      description: |
        The inverse of the `countries` parameter.
      name: not_countries
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/countries"
    topic:
      description: |
        The topic to which you want to restrict the articles of your choice.
        Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label.
      name: topic
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/topic"
    sources:
      description: |
        One or more news resources to filter your search. It should be the normal form of the URL,
        For example: `nytimes.com,theguardian.com`
      name: sources
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/sources"
    not_sources:
      description: |
        One or more sources to be excluded from the search.
        Comma-separated list. For example: `nytimes.com,cnn.com,wsj.com`
      name: not_sources
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/not_sources"
    ranked_only:
      description: |
        Default: `True`
        Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals `999999`
      name: ranked_only
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/ranked_only"
    from_rank:
      description: |
        `[0:999999]` The lowest boundary of the rank of a news website to filter by.
        Important: lower rank means that a source is more popular
      name: from_rank
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/rank"
    to_rank:
      description: |
        `[0:999999]` The upper boundary of the rank of a news website to filter by.
      name: to_rank
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/rank"
    sort_by:
      description: |
        `relevancy` (default value) — the most relevant results first
        `date` — the most recently published results first
        `rank` — the results from the highest-ranked sources first
      name: sort_by
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/sort_by"
    when:
      description: |
        The time period you want to get the latest headlines for.

        Accepted forms:
        - `7d`: Dailly Form (last 7 days time period), `30d` (last 30 days time period)
        - `1h`: Hourly Form (last hour), `24h` (last 24 hours)

        *Default*: The number of historic data available for your subscription plan
      name: when
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/when"
    page_size:
      description: |
        `[1:100]` How many articles to return per page.
      name: page_size
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/page_size"
    page:
      description: |
        The number of the page. Use it to scroll through the results.
        This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles.
      name: page
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/page"
  schemas:
    Search:
      type: object
      properties:
        q:
          type: string
          description: |
            The keyword or keywords you're searching for. This is the most important part of your query. 
            For for more examples and explanations, leant [Advanced Query Parameter](#).
          example: '"Elon Musk"'
        lang:
          type: string
          description: The language you want to search in.
          enum:
            [
              "af",
              "ar",
              "bg",
              "bn",
              "ca",
              "cn",
              "cs",
              "cy",
              "da",
              "de",
              "el",
              "en",
              "es",
              "et",
              "fa",
              "fi",
              "fr",
              "gu",
              "he",
              "hi",
              "hr",
              "hu",
              "id",
              "it",
              "ja",
              "kn",
              "ko",
              "lt",
              "lv",
              "mk",
              "ml",
              "mr",
              "ne",
              "nl",
              "no",
              "pa",
              "pl",
              "pt",
              "ro",
              "ru",
              "sk",
              "sl",
              "so",
              "sq",
              "sv",
              "sw",
              "ta",
              "te",
              "th",
              "tl",
              "tr",
              "tw",
              "uk",
              "ur",
              "vi",
            ]
          example: "en"
        not_lang:
          type: string
          description:
            The language to exclude from the search results. Inverse to the
            `lang` parameter.
          enum:
            [
              "af",
              "ar",
              "bg",
              "bn",
              "ca",
              "cn",
              "cs",
              "cy",
              "da",
              "de",
              "el",
              "en",
              "es",
              "et",
              "fa",
              "fi",
              "fr",
              "gu",
              "he",
              "hi",
              "hr",
              "hu",
              "id",
              "it",
              "ja",
              "kn",
              "ko",
              "lt",
              "lv",
              "mk",
              "ml",
              "mr",
              "ne",
              "nl",
              "no",
              "pa",
              "pl",
              "pt",
              "ro",
              "ru",
              "sk",
              "sl",
              "so",
              "sq",
              "sv",
              "sw",
              "ta",
              "te",
              "th",
              "tl",
              "tr",
              "tw",
              "uk",
              "ur",
              "vi",
            ]
        published_date_precision:
          type: string
          enum:
            - full
            - timezone unknown
            - date
          description: |
            The precision of the published date. There are three types:
            - `full`: The day and time of an article is correctly identified with the appropriate timezone.
            - `timezone unknown`: The day and time of an article is correctly identified without timezone.
            - `date`: Only the day is identified without an exact time.
        from:
          type: string
          description:
            The start date for the search in `YYYY/mm/dd` format. The default
            timezone is UTC.  Defaults to the past week.
          example: "2021/05/06"
        to:
          type: string
          description:
            The end date for the search in `YYYY/mm/dd` format. The default
            timezone is UTC.
          example: "2021/05/06"
        search_in:
          type: string
          description: The fields to search for the keywords in.
          enum: ["title", "summary", "title_summary"]
          example: "title"
        countries:
          type: string
          description: |
            The countries where the news publisher is located, 
            using the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. 
            Multiple countries can be specified, separated by commas.
          example: "US,CA"
        not_countries:
          type: string
          description: |
            The countries to exclude from the search results, 
            using the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. 
            Multiple countries can be specified, separated by commas.
        topic:
          type: string
          description: The topic to restrict the articles to.
          enum:
            [
              "news",
              "sport",
              "tech",
              "world",
              "finance",
              "politics",
              "business",
              "economics",
              "entertainment",
              "beauty",
              "travel",
              "music",
              "food",
              "science",
              "gaming",
            ]
          example: "business"
        sources:
          type: string
          description: |
            The news sources to filter the search, specified in the normal form of the URL. 
            For example, `nytimes.com,theguardian.com`.
          example: "nytimes.com,theguardian.com"
        not_sources:
          type: string
          description: |
            The news sources to exclude from the search, specified as a comma-separated list. 
            For example, `nytimes.com,cnn.com,wsj.com`.
        ranked_only:
          type: boolean
          description: |
            If true, limits the search to sources in the top 1 million online websites. 
            Unranked sources are assigned a rank of `999999`.
          default: true
          example: true
        from_rank:
          type: integer
          description: |
            The lowest boundary of the rank of a news website to filter by. 
            Lower rank means a more popular source. Range: `[0:999999]`.
          minimum: 0
          maximum: 999999
        to_rank:
          type: integer
          description: |
            The upper boundary of the rank of a news website to filter by. Range: `[0:999999]`.
          minimum: 0
          maximum: 999999
        sort_by:
          type: string
          description: The sorting order of the search results.
          enum: ["relevancy", "date", "rank"]
          default: relevancy
          example: "rank"
        page_size:
          type: integer
          description: |
            The number of articles to return per page. Range: `[1:100]`.
          minimum: 1
          maximum: 100
          example: 100
        page:
          type: integer
          description: |
            The page number for paginated results. Use it to scroll through the results, 
            as one API response cannot return more than 100 articles.
          minimum: 1
          example: 1
    SourcesQuery:
      type: object
      properties:
        lang:
          type: string
          description: The language you want to search in.
          enum:
            [
              "af",
              "ar",
              "bg",
              "bn",
              "ca",
              "cn",
              "cs",
              "cy",
              "da",
              "de",
              "el",
              "en",
              "es",
              "et",
              "fa",
              "fi",
              "fr",
              "gu",
              "he",
              "hi",
              "hr",
              "hu",
              "id",
              "it",
              "ja",
              "kn",
              "ko",
              "lt",
              "lv",
              "mk",
              "ml",
              "mr",
              "ne",
              "nl",
              "no",
              "pa",
              "pl",
              "pt",
              "ro",
              "ru",
              "sk",
              "sl",
              "so",
              "sq",
              "sv",
              "sw",
              "ta",
              "te",
              "th",
              "tl",
              "tr",
              "tw",
              "uk",
              "ur",
              "vi",
            ]
          example: "en"
        countries:
          type: string
          description: |
            The countries where the news publisher is located, using the 
            [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. 
            Multiple countries can be specified, separated by commas.
          example: "US,CA"
        topic:
          type: string
          description: The topic to restrict the articles to.
          enum:
            [
              "news",
              "sport",
              "tech",
              "world",
              "finance",
              "politics",
              "business",
              "economics",
              "entertainment",
              "beauty",
              "travel",
              "music",
              "food",
              "science",
              "gaming",
            ]
          example: "business"
    latestHeadlines:
      type: object
      properties:
        when:
          type: string
          default: 7d
          description: |
            The time period for which you want to get the latest headlines.
            Accepted forms:
            - `7d`: Dailly Form (last 7 days time period), `30d` (last 30 days time period)
            - `1h`: Hourly Form (last hour), `24h` (last 24 hours)
          example: "12h"
        lang:
          type: string
          description: The language you want to search in.
          enum:
            [
              "af",
              "ar",
              "bg",
              "bn",
              "ca",
              "cn",
              "cs",
              "cy",
              "da",
              "de",
              "el",
              "en",
              "es",
              "et",
              "fa",
              "fi",
              "fr",
              "gu",
              "he",
              "hi",
              "hr",
              "hu",
              "id",
              "it",
              "ja",
              "kn",
              "ko",
              "lt",
              "lv",
              "mk",
              "ml",
              "mr",
              "ne",
              "nl",
              "no",
              "pa",
              "pl",
              "pt",
              "ro",
              "ru",
              "sk",
              "sl",
              "so",
              "sq",
              "sv",
              "sw",
              "ta",
              "te",
              "th",
              "tl",
              "tr",
              "tw",
              "uk",
              "ur",
              "vi",
            ]
          example: "en"
        not_lang:
          type: string
          description:
            The language to exclude from the search results. Inverse to the
            `lang` parameter.
          enum:
            [
              "af",
              "ar",
              "bg",
              "bn",
              "ca",
              "cn",
              "cs",
              "cy",
              "da",
              "de",
              "el",
              "en",
              "es",
              "et",
              "fa",
              "fi",
              "fr",
              "gu",
              "he",
              "hi",
              "hr",
              "hu",
              "id",
              "it",
              "ja",
              "kn",
              "ko",
              "lt",
              "lv",
              "mk",
              "ml",
              "mr",
              "ne",
              "nl",
              "no",
              "pa",
              "pl",
              "pt",
              "ro",
              "ru",
              "sk",
              "sl",
              "so",
              "sq",
              "sv",
              "sw",
              "ta",
              "te",
              "th",
              "tl",
              "tr",
              "tw",
              "uk",
              "ur",
              "vi",
            ]
          example: "fr"
        countries:
          type: string
          description: |
            The countries where the news publisher is located, using the 
            [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. 
            Multiple countries can be specified, separated by commas.
        not_countries:
          type: string
          description: |
            The countries to exclude from the search results, 
            using the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. 
            Multiple countries can be specified, separated by commas.
        topic:
          type: string
          description: The topic to restrict the articles to.
          enum:
            [
              "news",
              "sport",
              "tech",
              "world",
              "finance",
              "politics",
              "business",
              "economics",
              "entertainment",
              "beauty",
              "travel",
              "music",
              "food",
              "science",
              "gaming",
            ]
          example: "business"
        sources:
          type: string
          description: |
            The news sources to filter the search, specified in the normal form of the URL. 
            For example, `nytimes.com,theguardian.com`.
          example: "nytimes.com,theguardian.com"
        not_sources:
          type: string
          description: |
            The news sources to exclude from the search, specified as a comma-separated list. 
            For example, `nytimes.com,cnn.com,wsj.com`.
        ranked_only:
          type: boolean
          description: |
            If true, limits the search to sources in the top 1 million online websites. 
            Unranked sources are assigned a rank of `999999`.
          example: true
        page_size:
          type: integer
          description: |
            The number of articles to return per page. Range: `[1:100]`.
          minimum: 1
          maximum: 100
          example: 100
        page:
          type: integer
          description: |
            The page number for paginated results. Use it to scroll through the results, 
            as one API response cannot return more than 100 articles.
          minimum: 1
          example: 1

    q:
      type: string
      example: '"Elon Musk"'
    lang:
      type: string
      enum:
        [
          "af",
          "ar",
          "bg",
          "bn",
          "ca",
          "cn",
          "cs",
          "cy",
          "da",
          "de",
          "el",
          "en",
          "es",
          "et",
          "fa",
          "fi",
          "fr",
          "gu",
          "he",
          "hi",
          "hr",
          "hu",
          "id",
          "it",
          "ja",
          "kn",
          "ko",
          "lt",
          "lv",
          "mk",
          "ml",
          "mr",
          "ne",
          "nl",
          "no",
          "pa",
          "pl",
          "pt",
          "ro",
          "ru",
          "sk",
          "sl",
          "so",
          "sq",
          "sv",
          "sw",
          "ta",
          "te",
          "th",
          "tl",
          "tr",
          "tw",
          "uk",
          "ur",
          "vi",
        ]
      example: "en"
    publish_date_precision:
      type: string
      enum: ["full", "timezone unknown", "date"]
      example: "full"
    date:
      type: string
      example: "2021/05/06"
    search_in:
      type: string
      enum: ["title", "summary", "title_summary"]
      example: "title"
    countries:
      type: string
      example: "US,CA"
    topic:
      type: string
      description: The topic to restrict the articles to.
      enum:
        [
          "news",
          "sport",
          "tech",
          "world",
          "finance",
          "politics",
          "business",
          "economics",
          "entertainment",
          "beauty",
          "travel",
          "music",
          "food",
          "science",
          "gaming",
        ]
      example: "business"
    sources:
      type: string
      example: "nytimes.com,theguardian.com"
    not_sources:
      type: string
      example: "wsj.com"
    ranked_only:
      type: boolean
      example: true
    rank:
      type: integer
      minimum: 1
      maximum: 999999
      example: 1000
    sort_by:
      type: string
      enum: ["relevancy", "date", "rank"]
      example: "rank"
    when:
      type: string
      example: "24h"
    page_size:
      type: integer
      minimum: 1
      maximum: 100
      example: 100
    page:
      type: integer
      minimum: 1
      example: 1
    # Response parameters
    success_status:
      type: string
      description: The status of the response.
      enum: ["ok", "No matches for your search."]
      example: "ok"
    error_status:
      type: string
      description: The error status of the response.
      enum: ["error", "No matches for your search."]
      example: "error"
    list:
      type: array
      description: A list of items.
      items:
        type: string
      nullable: true
    article:
      type: array
      description: A list of articles.
      items:
        type: object
        properties:
          title:
            type: string
            description: The title of the article.
          author:
            type: string
            description: The author of the article.
          published_date:
            type: string
            description: The date the article was published.
          published_date_precision:
            type: string
            description: The precision of the publication date.
          link:
            type: string
            description: The URL link to the article.
          clean_url:
            type: string
            description: The clean URL of the article.
          excerpt:
            type: string
            description: An excerpt from the article.
            nullable: true
          summary:
            type: string
            description: A summary of the article.
          rights:
            type: string
            description: The rights information of the article.
            nullable: true
          rank:
            type: integer
            description: The rank of the article.
          topic:
            type: string
            description: The topic of the article.
          country:
            type: string
            description: The country of the article.
          language:
            type: string
            description: The language of the article.
            nullable: true
          authors:
            type: string
            description: The authors of the article.
          is_opinion:
            type: boolean
            description:
              True if the article is an opinion piece; false otherwise.
          twitter_account:
            type: string
            description: The Twitter account associated with the article.
            nullable: true
          _score:
            type: number
            description: The score of the article.
            nullable: true
          _id:
            type: string
            description: The ID of the article.
    search_user_input:
      type: object
      description: The user input for a search request.
      properties:
        q:
          type: string
          description: The keyword or keywords for the search.
        search_in:
          $ref: "#/components/schemas/list"
          description: The fields to search in.
        lang:
          $ref: "#/components/schemas/list"
          description: The languages to include in the search.
        not_lang:
          $ref: "#/components/schemas/list"
          description: The languages to exclude from the search.
        countries:
          $ref: "#/components/schemas/list"
          description: The countries to include in the search.
        not_countries:
          $ref: "#/components/schemas/list"
          description: The countries to exclude from the search.
        from:
          type: string
          description: The start date for the search.
        to:
          type: string
          description: The end date for the search.
          nullable: true
        ranked_only:
          type: string
          description: If true, limits the search to ranked sources only.
        from_rank:
          type: integer
          description: The minimum rank of the sources to include in the search.
          nullable: true
        to_rank:
          type: integer
          description: The maximum rank of the sources to include in the search.
          nullable: true
        sort_by:
          type: string
          description: The sorting order of the search results.
        page:
          type: integer
          description: The page number of the search results.
        size:
          type: integer
          description: The number of results per page.
        sources:
          $ref: "#/components/schemas/list"
          description: The sources to include in the search.
        not_sources:
          $ref: "#/components/schemas/list"
          description: The sources to exclude from the search.
        topic:
          type: string
          description: The topic to include in the search.
          nullable: true
        published_date_precision:
          type: string
          description: The precision of the publication date.
          nullable: true
    latest_headlines_user_input:
      type: object
      description: The user input for a latest headlines request.
      properties:
        lang:
          $ref: "#/components/schemas/list"
          description: The languages to include in the search.
        not_lang:
          $ref: "#/components/schemas/list"
          description: The languages to exclude from the search.
        countries:
          $ref: "#/components/schemas/list"
          description: The countries to include in the search.
        not_countries:
          $ref: "#/components/schemas/list"
          description: The countries to exclude from the search.
        page:
          type: integer
          description: The page number of the search results.
        size:
          type: integer
          description: The number of results per page.
        sources:
          $ref: "#/components/schemas/list"
          description: The sources to include in the search.
        not_sources:
          $ref: "#/components/schemas/list"
          description: The sources to exclude from the search.
        topic:
          type: string
          description: The topic to include in the search.
          nullable: true
    sources_user_input:
      type: object
      description: The user input for a sources request.
      properties:
        lang:
          $ref: "#/components/schemas/list"
          description: The languages to include in the search.
        countries:
          $ref: "#/components/schemas/list"
          description: The countries to include in the search.
        topic:
          type: string
          description: The topic to include in the search.
          nullable: true
    200_response:
      type: object
      description: The response for a successful search request.
      properties:
        status:
          $ref: "#/components/schemas/success_status"
          description: The status of the response.
        total_hits:
          type: integer
          description: The total number of hits for the search.
        page:
          type: integer
          description: The current page number.
        total_pages:
          type: integer
          description: The total number of pages.
        page_size:
          type: integer
          description: The number of results per page.
        articles:
          $ref: "#/components/schemas/article"
          description: The list of articles returned by the search.
        user_input:
          $ref: "#/components/schemas/search_user_input"
          description: The user input for the search request.
    200_response_latest:
      type: object
      description: The response for a successful latest headlines request.
      properties:
        status:
          $ref: "#/components/schemas/success_status"
          description: The status of the response.
        total_hits:
          type: integer
          description: The total number of hits for the search.
        page:
          type: integer
          description: The current page number.
        total_pages:
          type: integer
          description: The total number of pages.
        page_size:
          type: integer
          description: The number of results per page.
        articles:
          $ref: "#/components/schemas/article"
          description: The list of articles returned by the search.
        user_input:
          $ref: "#/components/schemas/latest_headlines_user_input"
          description: The user input for the latest headlines request.
    200_response_sources:
      type: object
      description: The response for a successful sources request.
      properties:
        message:
          type: string
          description: The message of the response.
        sources:
          $ref: "#/components/schemas/list"
          description: The list of sources returned by the request.
        user_input:
          $ref: "#/components/schemas/sources_user_input"
          description: The user input for the sources request.
    error_response:
      type: object
      description: The response for an error.
      properties:
        status:
          $ref: "#/components/schemas/error_status"
          description: The error status of the response.
        error_code:
          type: string
          description: The error code of the response.
        message:
          type: string
          description: The error message of the response.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: |
        API Key to authenticate requests.

        To access the API, include your API key in the `x-api-key` header. 
        To obtain your API key, complete the [form](https://www.newscatcherapi.com/pricing) or contact us directly.
